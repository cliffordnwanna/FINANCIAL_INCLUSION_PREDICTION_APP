# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1acTsFWlFlZxotyVjjegm48SSpAMasnCa
"""

import streamlit as st
import numpy as np
import pandas as pd
import pickle
import gdown
import os

# Function to create directories if they do not exist
def create_directory(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

# Function to download the model from Google Drive
def download_model_from_gdrive(gdrive_url, output_path):
    create_directory(os.path.dirname(output_path))

    if not os.path.exists(output_path):
        st.info("Downloading model from Google Drive...")
        gdown.download(gdrive_url, output_path, quiet=False)
        st.success("Model downloaded successfully!")
    else:
        st.info("Model already exists locally. Skipping download.")

# Google Drive URL (replace with your actual file ID)
gdrive_url = "https://drive.google.com/uc?id=1l1lyoLiW7SBZCh_C7-0gO2bvgPxkkxep"
model_path = "models/streamlit_trained_model.sav"

# Download the model
download_model_from_gdrive(gdrive_url, model_path)

# Load your trained model
loaded_model = pickle.load(open(model_path, 'rb'))

# Function to make predictions using the loaded model
def make_prediction(input_data):
    input_data_as_numpy_array = np.asarray(input_data)
    input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)
    prediction = loaded_model.predict(input_data_reshaped)

    if prediction[0] == 0:
        return 'NO BANK ACCOUNT'
    else:
        return 'HAS BANK ACCOUNT'

# Streamlit main function
def main():
    st.title('FINANCIAL INCLUSION PREDICTION')

    # Input fields for features
    country = st.number_input('Enter country:')
    year = st.number_input('Enter year:')
    uniqueid = st.number_input('Enter uniqueid:')
    location_type = st.number_input('Enter location type:')
    cellphone_access = st.number_input('Enter cellphone access:')
    household_size = st.number_input('Enter household size:')
    age_of_respondent = st.number_input('Enter age of respondent:')
    gender_of_respondent = st.number_input('Enter gender of respondent:')
    relationship_with_head = st.number_input('Enter relationship with head:')
    marital_status = st.number_input('Enter marital status:')
    education_level = st.number_input('Enter education level:')
    job_type = st.number_input('Enter job type:')

    if st.button('Make Prediction'):
        input_data = [country, year, uniqueid, location_type, cellphone_access, household_size,
                      age_of_respondent, gender_of_respondent, relationship_with_head,
                      marital_status, education_level, job_type]
        result = make_prediction(input_data)
        st.success(f'The predicted result is: {result}')

if __name__ == "__main__":
    main()